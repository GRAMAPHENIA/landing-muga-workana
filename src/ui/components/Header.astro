---
/**
 * Componente Header con navegación responsive
 * Requirements: 2.3, 6.3, 7.4
 */

import { siteConfig } from '../../infrastructure/config/site.config';
import type { NavigationItem } from '../../domain/interfaces/navigation.interface';

export interface Props {
  navigation?: NavigationItem[];
  currentPath?: string;
  transparent?: boolean;
  sticky?: boolean;
  className?: string;
}

const {
  navigation = siteConfig.navigation,
  currentPath = Astro.url.pathname,
  transparent = false,
  sticky = true,
  className = '',
} = Astro.props;

const { logo } = siteConfig;

// Función para determinar si un enlace está activo
function isActiveLink(href: string, currentPath: string): boolean {
  if (href === '/') {
    return currentPath === '/';
  }
  return currentPath.startsWith(href);
}

// Clases CSS dinámicas
const headerClasses = [
  'w-full z-50 transition-all duration-300',
  sticky ? 'sticky top-0' : 'relative',
  transparent ? 'bg-transparent' : 'bg-white shadow-sm',
  className
].filter(Boolean).join(' ');

const navClasses = transparent 
  ? 'text-white hover:text-gray-200' 
  : 'text-gray-700 hover:text-blue-600';

const activeNavClasses = transparent
  ? 'text-white font-semibold'
  : 'text-blue-600 font-semibold';
---

<header class={headerClasses} id="main-header">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-16 lg:h-20">
      
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a 
          href={logo.href || '/'}
          class="flex items-center space-x-2 transition-opacity hover:opacity-80"
          aria-label={`Ir a ${logo.alt}`}
        >
          <img
            src={logo.src}
            alt={logo.alt}
            width={logo.width || 120}
            height={logo.height || 40}
            class="h-8 lg:h-10 w-auto"
            loading="eager"
          />
        </a>
      </div>

      <!-- Navegación Desktop -->
      <nav class="hidden md:flex items-center space-x-8" aria-label="Navegación principal">
        {navigation.map((item) => {
          const isActive = isActiveLink(item.href, currentPath);
          const linkClasses = isActive ? activeNavClasses : navClasses;
          
          return (
            <a
              href={item.href}
              class={`${linkClasses} transition-colors duration-200 font-medium`}
              aria-label={item.ariaLabel || item.label}
              aria-current={isActive ? 'page' : undefined}
              {...(item.external && { 
                target: '_blank', 
                rel: 'noopener noreferrer' 
              })}
            >
              {item.label}
              {item.external && (
                <svg 
                  class="inline-block ml-1 w-3 h-3" 
                  fill="currentColor" 
                  viewBox="0 0 20 20"
                  aria-hidden="true"
                >
                  <path 
                    fill-rule="evenodd" 
                    d="M4.25 5.5a.75.75 0 00-.75.75v8.5c0 .414.336.75.75.75h8.5a.75.75 0 00.75-.75v-4a.75.75 0 011.5 0v4A2.25 2.25 0 0112.75 17h-8.5A2.25 2.25 0 012 14.75v-8.5A2.25 2.25 0 014.25 4h5a.75.75 0 010 1.5h-5z" 
                    clip-rule="evenodd" 
                  />
                  <path 
                    fill-rule="evenodd" 
                    d="M6.194 12.753a.75.75 0 001.06.053L16.5 4.44v2.81a.75.75 0 001.5 0v-4.5a.75.75 0 00-.75-.75h-4.5a.75.75 0 000 1.5h2.553l-9.056 8.194a.75.75 0 00-.053 1.06z" 
                    clip-rule="evenodd" 
                  />
                </svg>
              )}
            </a>
          );
        })}
      </nav>

      <!-- Botón menú móvil -->
      <div class="md:hidden">
        <button
          type="button"
          class={`${transparent ? 'text-white' : 'text-gray-700'} hover:text-blue-600 
                  focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 
                  transition-colors duration-200 p-2`}
          aria-expanded="false"
          aria-controls="mobile-menu"
          aria-label="Abrir menú de navegación"
          id="mobile-menu-button"
        >
          <svg 
            class="block h-6 w-6" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke-width="1.5" 
            stroke="currentColor" 
            aria-hidden="true"
            id="menu-open-icon"
          >
            <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
          </svg>
          <svg 
            class="hidden h-6 w-6" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke-width="1.5" 
            stroke="currentColor" 
            aria-hidden="true"
            id="menu-close-icon"
          >
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Menú móvil -->
    <div 
      class="md:hidden hidden" 
      id="mobile-menu"
      role="menu"
      aria-orientation="vertical"
      aria-labelledby="mobile-menu-button"
    >
      <div class={`px-2 pt-2 pb-3 space-y-1 ${transparent ? 'bg-black/90' : 'bg-white'} 
                   shadow-lg rounded-lg mt-2 border ${transparent ? 'border-gray-700' : 'border-gray-200'}`}>
        {navigation.map((item) => {
          const isActive = isActiveLink(item.href, currentPath);
          const mobileLinkClasses = isActive 
            ? `${transparent ? 'text-white bg-gray-800' : 'text-blue-600 bg-blue-50'} font-semibold`
            : `${transparent ? 'text-gray-300 hover:text-white hover:bg-gray-800' : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'}`;
          
          return (
            <a
              href={item.href}
              class={`${mobileLinkClasses} block px-3 py-2 rounded-md text-base font-medium 
                      transition-colors duration-200`}
              role="menuitem"
              aria-label={item.ariaLabel || item.label}
              aria-current={isActive ? 'page' : undefined}
              {...(item.external && { 
                target: '_blank', 
                rel: 'noopener noreferrer' 
              })}
            >
              {item.label}
              {item.external && (
                <svg 
                  class="inline-block ml-1 w-4 h-4" 
                  fill="currentColor" 
                  viewBox="0 0 20 20"
                  aria-hidden="true"
                >
                  <path 
                    fill-rule="evenodd" 
                    d="M4.25 5.5a.75.75 0 00-.75.75v8.5c0 .414.336.75.75.75h8.5a.75.75 0 00.75-.75v-4a.75.75 0 011.5 0v4A2.25 2.25 0 0112.75 17h-8.5A2.25 2.25 0 012 14.75v-8.5A2.25 2.25 0 014.25 4h5a.75.75 0 010 1.5h-5z" 
                    clip-rule="evenodd" 
                  />
                  <path 
                    fill-rule="evenodd" 
                    d="M6.194 12.753a.75.75 0 001.06.053L16.5 4.44v2.81a.75.75 0 001.5 0v-4.5a.75.75 0 00-.75-.75h-4.5a.75.75 0 000 1.5h2.553l-9.056 8.194a.75.75 0 00-.053 1.06z" 
                    clip-rule="evenodd" 
                  />
                </svg>
              )}
            </a>
          );
        })}
      </div>
    </div>
  </div>
</header>

<script>
  // Funcionalidad del menú móvil
  function initMobileMenu() {
    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const openIcon = document.getElementById('menu-open-icon');
    const closeIcon = document.getElementById('menu-close-icon');
    
    if (!menuButton || !mobileMenu || !openIcon || !closeIcon) {
      return;
    }

    let isMenuOpen = false;

    function toggleMenu() {
      isMenuOpen = !isMenuOpen;
      
      // Toggle visibility
      if (isMenuOpen) {
        mobileMenu.classList.remove('hidden');
        openIcon.classList.add('hidden');
        closeIcon.classList.remove('hidden');
        menuButton.setAttribute('aria-expanded', 'true');
        
        // Focus trap - enfocar primer enlace
        const firstLink = mobileMenu.querySelector('a');
        if (firstLink) {
          firstLink.focus();
        }
      } else {
        mobileMenu.classList.add('hidden');
        openIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
        menuButton.setAttribute('aria-expanded', 'false');
      }
    }

    // Event listeners
    menuButton.addEventListener('click', toggleMenu);
    
    // Cerrar menú al hacer clic en un enlace
    const menuLinks = mobileMenu.querySelectorAll('a');
    menuLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (isMenuOpen) {
          toggleMenu();
        }
      });
    });

    // Cerrar menú con Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isMenuOpen) {
        toggleMenu();
        menuButton.focus();
      }
    });

    // Cerrar menú al hacer clic fuera
    document.addEventListener('click', (e) => {
      if (isMenuOpen && !menuButton.contains(e.target as Node) && !mobileMenu.contains(e.target as Node)) {
        toggleMenu();
      }
    });
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMobileMenu);
  } else {
    initMobileMenu();
  }

  // Reinicializar en navegación SPA (si se usa)
  document.addEventListener('astro:page-load', initMobileMenu);
</script>

<style>
  /* Animaciones suaves para el menú móvil */
  #mobile-menu {
    transition: all 0.2s ease-in-out;
  }
  
  /* Mejoras de accesibilidad para focus */
  #mobile-menu-button:focus {
    outline: 2px solid theme('colors.blue.500');
    outline-offset: 2px;
  }
  
  /* Smooth scroll para navegación interna */
  html {
    scroll-behavior: smooth;
  }
  
  /* Sticky header con backdrop blur en navegadores compatibles */
  @supports (backdrop-filter: blur(10px)) {
    header.bg-transparent {
      backdrop-filter: blur(10px);
      background-color: rgba(255, 255, 255, 0.8);
    }
  }
</style>